cmake_minimum_required(VERSION 3.5.0)

get_filename_component(ProjectId ${CMAKE_CURRENT_SOURCE_DIR} NAME)
project(${ProjectId} LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

add_executable(app1 "src/main1.cpp" "src/process_str.cpp")
add_executable(app2 "src/main2.cpp" "src/process_str.cpp")
add_executable(app3 "src/main3.cpp" "src/process_str.cpp")

set(CLANG_FLAGS -Wall -Wextra -Wpedantic -O3 $<$<CONFIG:Debug>:-pg>)
set(GNU_FLAGS -Wall -Wextra -Wpedantic -O3 $<$<CONFIG:Debug>:-pg>)
set(MSVC_FLAGS /utf-8 /J /W4 /Oi $<$<CONFIG:Release>:/O2>)
if (CMAKE_C_COMPILER_ID STREQUAL "Clang")
	target_compile_options(app1 PRIVATE ${CLANG_FLAGS})
	target_compile_options(app2 PRIVATE ${CLANG_FLAGS})
	target_compile_options(app3 PRIVATE ${CLANG_FLAGS})
elseif (CMAKE_C_COMPILER_ID STREQUAL "GNU")
	target_compile_options(app1 PRIVATE ${GNU_FLAGS})
	target_compile_options(app2 PRIVATE ${GNU_FLAGS})
	target_compile_options(app3 PRIVATE ${GNU_FLAGS})
elseif (CMAKE_C_COMPILER_ID STREQUAL "MSVC")
	target_compile_options(app1 PRIVATE ${MSVC_FLAGS})
	target_compile_options(app2 PRIVATE ${MSVC_FLAGS})
	target_compile_options(app3 PRIVATE ${MSVC_FLAGS})
	target_compile_definitions(app1 PRIVATE _CRT_SECURE_NO_WARNINGS)
	target_compile_definitions(app2 PRIVATE _CRT_SECURE_NO_WARNINGS)
	target_compile_definitions(app3 PRIVATE _CRT_SECURE_NO_WARNINGS)
endif()

